<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thuria.Calot.TestUtilities</name>
    </assembly>
    <members>
        <member name="T:Thuria.Calot.TestUtilities.ConstructorTestHelper">
            <summary>
            Constructor Test Helper Methods
            </summary>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ConstructorTestHelper.ConstructObject``1(System.String,System.Object,System.Boolean,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper method to construct any object and create default parameters as necessary
            </summary>
            <typeparam name="T">Object Type to be Constructed</typeparam>
            <param name="parameterName">Parameter Name of parameter that should contain null or specified value (Optional)</param>
            <param name="parameterValue">Parameter Value that should be used for specified parameter</param>
            <param name="allParametersMatch">All Parameter Names must match when looking for a matching constructor</param>
            <param name="constructorParams">Optional Constructor Parameters</param>
            <returns>Newly constructed object</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ConstructorTestHelper.ConstructObject(System.Type,System.String,System.Object,System.Boolean,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper method to construct any object and create default parameters as necessary
            </summary>
            <param name="objectType">Object Type to be Constructed</param>
            <param name="parameterName">Parameter Name of parameter that should contain null or specified value (Optional)</param>
            <param name="parameterValue">Parameter Value that should be used for specified parameter</param>
            <param name="allParametersMatch">All Parameter Names must match when looking for a matching constructor</param>
            <param name="constructorParams">Optional Constructor Parameters</param>
            <returns>Newly constructed object</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ConstructorTestHelper.ValidateArgumentNullExceptionIfParameterIsNull``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Validate that when a null parameter is given to a constructor, an ArgumentNullException is thrown
            </summary>
            <typeparam name="T">Object Type to test</typeparam>
            <param name="parameterName">Parameter Name to test</param>
            <param name="constructorParams">Optional Constructor Parameters</param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ConstructorTestHelper.ValidateExceptionIsThrownIfParameterIsNull``2(System.String,System.Boolean,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Validate that the specified Exception is thrown if the specified parameter value is null
            </summary>
            <typeparam name="T">Object to test</typeparam>
            <typeparam name="TException">Exception expected to be thrown</typeparam>
            <param name="parameterName">Parameter Name to test</param>
            <param name="allParametersMatch">All Parameter Names must match when looking for a matching constructor</param>
            <param name="constructorParams">Optional Constructor Parameters</param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ConstructorTestHelper.ValidatePropertySetWithParameter``1(System.String,System.String,System.Boolean,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Validate that a property is set with the value given during the constructing of the object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameterName">Constructor parameter Name</param>
            <param name="propertyName">Object Property Name</param>
            <param name="allParametersMatch">All Parameter Names must match when looking for a matching constructor</param>
            <param name="constructorParams">Optional Constructor Parameters</param>
        </member>
        <member name="T:Thuria.Calot.TestUtilities.MethodTestHelper">
            <summary>
            Method Test Helper class
            </summary>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.MethodTestHelper.ValidateArgumentNullExceptionIfParameterIsNullAsync``1(System.String,System.String,System.Object)">
            <summary>
            Validate that if a specified argument value is null, that a ArgumentNullException is thrown on an Async method
            </summary>
            <typeparam name="T">Type under test</typeparam>
            <param name="methodName">Method to be test</param>
            <param name="parameterName">Method Parameter Name to verify</param>
            <param name="parameterValue">Parameter Value (Default null)</param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.MethodTestHelper.ValidateExceptionIsThrownIfParameterIsNullAsync``2(System.String,System.String,System.Object)">
            <summary>
            Validate that if a specified argument value is null, that a specified exception is thrown on an Async method
            </summary>
            <typeparam name="T">Type under test</typeparam>
            <typeparam name="TException">Exception expected to be thrown</typeparam>
            <param name="methodName">Method to be test</param>
            <param name="parameterName">Method Parameter Name to verify</param>
            <param name="parameterValue">Parameter Value (Default null)</param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.MethodTestHelper.ValidateArgumentNullExceptionIfParameterIsNull``1(System.String,System.String,System.Object)">
            <summary>
            Validate that if a specified argument value is null, that a ArgumentNullException is thrown
            </summary>
            <typeparam name="T">Type under test</typeparam>
            <param name="methodName">Method to be test</param>
            <param name="parameterName">Method Parameter Name to verify</param>
            <param name="parameterValue">Parameter Value (Default null)</param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.MethodTestHelper.ValidateExceptionIsThrownIfParameterIsNull``2(System.String,System.String,System.Object)">
            <summary>
            Validate that if a specified argument value is null, that a specified exception is thrown
            </summary>
            <typeparam name="T">Type under test</typeparam>
            <typeparam name="TException">Exception expected to be thrown</typeparam>
            <param name="methodName">Method to be test</param>
            <param name="parameterName">Method Parameter Name to verify</param>
            <param name="parameterValue">Parameter Value (Default null)</param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.MethodTestHelper.ValidateDecoratedWithAttribute``1(System.String,System.Type,System.Collections.Generic.List{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Validate that the method is Decorated with the expected Attribute
            </summary>
            <typeparam name="T">Object Type under test</typeparam>
            <param name="methodName">Object Method Name</param>
            <param name="attributeType">Attribute Type</param>
            <param name="attributePropertyValues">Attribute Property Values</param>
        </member>
        <member name="T:Thuria.Calot.TestUtilities.PropertyTestHelper">
            <summary>
            Property Test Helper class
            </summary>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.PropertyTestHelper.ValidateGetAndSet``1(System.String)">
            <summary>
            Validate when setting a property, the value is actually available via get
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.PropertyTestHelper.ValidateGetAndSet(System.Object,System.String)">
            <summary>
            Validate when setting a property, the value is actually available via get
            </summary>
            <param name="objectUnderTest"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.PropertyTestHelper.ValidateDecoratedWithAttribute``1(System.String,System.Type,System.Collections.Generic.List{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Validate that a property has been decorated with a specified Attribute
            </summary>
            <typeparam name="T">Object Type under test</typeparam>
            <param name="propertyName">Object Property Name</param>
            <param name="attributeType">Attribute Type</param>
            <param name="attributePropertyValues">Attribute Property Values</param>
        </member>
        <member name="T:Thuria.Calot.TestUtilities.RandomValueGenerator">
            <summary>
            Random Value Generator helper methods
            </summary>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomNumber(System.Int64,System.Int64)">
            <summary>
            Create Random Number
            </summary>
            <param name="minimumValue">Minimum Value</param>
            <param name="maximumValue">Maximum Number</param>
            <returns>Random Integer</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomValue(System.Type)">
            <summary>
            Create a Random Value of Type 
            </summary>
            <param name="objectType"></param>
            <returns>Random value of Type</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomString(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Create Random String
            </summary>
            <param name="minLength">Minimum length of the string</param>
            <param name="maxLength">Maximum length of the string</param>
            <param name="charSet">Character Set to be used in the string (Optional)</param>
            <returns>Random string</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomBoolean">
            <summary>
            Create Random boolean value
            </summary>
            <returns>Random boolean value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomUShort(System.Int16,System.Int16)">
            <summary>
            Create Random ushort
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random ushort value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomShort(System.UInt16,System.UInt16)">
            <summary>
            Create Random ushort
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random ushort value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomUInt(System.UInt32,System.UInt32)">
            <summary>
            Create Random uint
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random uint value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomULong(System.UInt64,System.UInt64)">
            <summary>
            Create Random ulong
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random ulong value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomInt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create Random Int
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <param name="shouldBePositive">Should Be Positive indicator (Default true)</param>
            <returns>Random int value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomLong(System.Int32,System.Int32)">
            <summary>
            Create Random Long
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random long value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomDouble(System.Int64,System.Int64)">
            <summary>
            Create Random Double
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random double value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomDecimal(System.Int64,System.Int64)">
            <summary>
            Create Random Decimal
            </summary>
            <param name="minimumValue">Minimum Value (Optional)</param>
            <param name="maximumValue">Maximum Value (Optional)</param>
            <returns>Random decimal value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomBytes(System.Int32)">
            <summary>
            Create Random Bytes
            </summary>
            <param name="noOfBytes">No of Bytes to Generate</param>
            <returns>An array with the generated byte(s)</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomEnum(System.Type)">
            <summary>
            Create Random Enum of Type
            </summary>
            <param name="enumType">Enum Type</param>
            <returns>Random enum value</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return Random item from supplied collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomArray(System.Type,System.Int32,System.Int32)">
            <summary>
            Create Random Array
            </summary>
            <param name="arrayType">Array Type</param>
            <param name="minItems">Minimum number of items (Optional)</param>
            <param name="maxItems">Maximum number of items (Optional)</param>
            <returns>An Array of Random values of the specified type</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomList(System.Type,System.Int32,System.Int32)">
            <summary>
            Create List of Random values
            </summary>
            <param name="genericCollectionType">List Type</param>
            <param name="minItems">Minimum number of items (Optional)</param>
            <param name="maxItems">Maximum number of items (Optional)</param>
            <returns>A Collection of Random values of the specified type</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomCollection(System.Type,System.Int32,System.Int32)">
            <summary>
            Create Collection of Random values
            </summary>
            <param name="genericCollectionType">Collection Type</param>
            <param name="minItems">Minimum number of items (Optional)</param>
            <param name="maxItems">Maximum number of items (Optional)</param>
            <returns>A Collection of Random values of the specified type</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomDictionary(System.Type,System.Int32,System.Int32)">
            <summary>
            Create Random Dictionary
            </summary>
            <returns>A Random Dictionary</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Create Random Date
            </summary>
            <param name="minDate">Minimum Date (Optional)</param>
            <param name="maxDate">Maximum Date (Optional)</param>
            <param name="dateOnly">Date Only and not Time</param>
            <param name="minTime">Minimum Time (Optional)</param>
            <param name="maxTime">Maximum Time (Optional)</param>
            <returns>Random created date</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.RandomValueGenerator.CreateRandomDate(System.DateTimeKind,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Create Random Date
            </summary>
            <param name="dateKind">Kind of Date</param>
            <param name="minDate">Minimum Date (Optional)</param>
            <param name="maxDate">Maximum Date (Optional)</param>
            <param name="dateOnly">Date Only and not Time</param>
            <param name="minTime">Minimum Time (Optional)</param>
            <param name="maxTime">Maximum Time (Optional)</param>
            <returns>Random created date</returns>
        </member>
        <member name="T:Thuria.Calot.TestUtilities.TestExtensions">
            <summary>
            Test Extension methods
            </summary>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.TestExtensions.CreateRandomValue(System.Reflection.ParameterInfo)">
            <summary>
            Create Random Value for Parameter
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.TestExtensions.CreateRandomValue(System.Reflection.PropertyInfo)">
            <summary>
            Create Random Value for Property
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.TestExtensions.CreateSubstitute(System.Type)">
            <summary>
            Create a NSubstitute Mocked object
            </summary>
            <param name="objectType">Object Type</param>
            <returns>NSubstitute Mocked object</returns>
        </member>
        <member name="T:Thuria.Calot.TestUtilities.TestHelper">
            <summary>
            General Test Helper methods
            </summary>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.TestHelper.CreateParameterValues(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.String)">
            <summary>
            Create Random Parameter Values
            </summary>
            <param name="allParameters">List of Parameters</param>
            <param name="nullParameterName">Parameter that should be null</param>
            <returns>List of random generated parameter values</returns>
        </member>
        <member name="M:Thuria.Calot.TestUtilities.TestHelper.CreateSubstituteDataReader``1(System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{System.String,System.Object},System.Type)">
            <summary>
            Create Substitute Data Reader
            </summary>
            <typeparam name="T">Data Reader Data Type</typeparam>
            <param name="dataReaderData">Data Reader Data</param>
            <param name="additionalColumnValues">Additional Column Values (Optional)</param>
            <param name="customColumnAttribute">Custom Column Attribute to verify the Column Name with (Optional [Property - DbColumnName])</param>
            <returns>A mocked (NSubstitute) IDataReader object</returns>
        </member>
        <member name="T:Thuria.Calot.TestUtilities.ThreadLocalRandom">
            <summary> 
            Convenience class for dealing with randomness. 
            </summary> 
        </member>
        <member name="F:Thuria.Calot.TestUtilities.ThreadLocalRandom.GlobalRandom">
            <summary> 
            Random number generator used to generate seeds, 
            which are then used to create new random number 
            generators on a per-thread basis. 
            </summary> 
        </member>
        <member name="F:Thuria.Calot.TestUtilities.ThreadLocalRandom.ThreadRandom">
            <summary> 
            Random number generator 
            </summary> 
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ThreadLocalRandom.NewRandom">
            <summary> 
            Creates a new instance of Random. The seed is derived 
            from a global (static) instance of Random, rather 
            than time. 
            </summary> 
        </member>
        <member name="P:Thuria.Calot.TestUtilities.ThreadLocalRandom.Instance">
            <summary> 
            Returns an instance of Random which can be used freely 
            within the current thread. 
            </summary> 
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ThreadLocalRandom.Next">
            <summary>See <see cref="M:System.Random.Next" /></summary> 
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ThreadLocalRandom.Next(System.Int32)">
            <summary>See <see cref="M:System.Random.Next(System.Int32)" /></summary> 
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ThreadLocalRandom.Next(System.Int32,System.Int32)">
            <summary>See <see cref="M:System.Random.Next(System.Int32,System.Int32)" /></summary> 
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ThreadLocalRandom.NextDouble">
            <summary>See <see cref="M:System.Random.NextDouble" /></summary> 
        </member>
        <member name="M:Thuria.Calot.TestUtilities.ThreadLocalRandom.NextBytes(System.Byte[])">
            <summary>See <see cref="M:System.Random.NextBytes(System.Byte[])" /></summary> 
        </member>
    </members>
</doc>
